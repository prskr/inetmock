// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package audit_mock is a generated GoMock package.
package audit_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	audit "gitlab.com/inetmock/inetmock/pkg/audit"
)

// MockEmitter is a mock of Emitter interface.
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter.
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance.
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockEmitter) Emit(ev audit.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", ev)
}

// Emit indicates an expected call of Emit.
func (mr *MockEmitterMockRecorder) Emit(ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEmitter)(nil).Emit), ev)
}

// MockSink is a mock of Sink interface.
type MockSink struct {
	ctrl     *gomock.Controller
	recorder *MockSinkMockRecorder
}

// MockSinkMockRecorder is the mock recorder for MockSink.
type MockSinkMockRecorder struct {
	mock *MockSink
}

// NewMockSink creates a new mock instance.
func NewMockSink(ctrl *gomock.Controller) *MockSink {
	mock := &MockSink{ctrl: ctrl}
	mock.recorder = &MockSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSink) EXPECT() *MockSinkMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockSink) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSinkMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSink)(nil).Name))
}

// OnSubscribe mocks base method.
func (m *MockSink) OnSubscribe(evs <-chan audit.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSubscribe", evs)
}

// OnSubscribe indicates an expected call of OnSubscribe.
func (mr *MockSinkMockRecorder) OnSubscribe(evs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSubscribe", reflect.TypeOf((*MockSink)(nil).OnSubscribe), evs)
}

// MockEventStream is a mock of EventStream interface.
type MockEventStream struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamMockRecorder
}

// MockEventStreamMockRecorder is the mock recorder for MockEventStream.
type MockEventStreamMockRecorder struct {
	mock *MockEventStream
}

// NewMockEventStream creates a new mock instance.
func NewMockEventStream(ctrl *gomock.Controller) *MockEventStream {
	mock := &MockEventStream{ctrl: ctrl}
	mock.recorder = &MockEventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStream) EXPECT() *MockEventStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEventStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventStream)(nil).Close))
}

// Emit mocks base method.
func (m *MockEventStream) Emit(ev audit.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", ev)
}

// Emit indicates an expected call of Emit.
func (mr *MockEventStreamMockRecorder) Emit(ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEventStream)(nil).Emit), ev)
}

// RegisterSink mocks base method.
func (m *MockEventStream) RegisterSink(ctx context.Context, s audit.Sink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSink", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSink indicates an expected call of RegisterSink.
func (mr *MockEventStreamMockRecorder) RegisterSink(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSink", reflect.TypeOf((*MockEventStream)(nil).RegisterSink), ctx, s)
}

// RemoveSink mocks base method.
func (m *MockEventStream) RemoveSink(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSink", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveSink indicates an expected call of RemoveSink.
func (mr *MockEventStreamMockRecorder) RemoveSink(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSink", reflect.TypeOf((*MockEventStream)(nil).RemoveSink), name)
}

// Sinks mocks base method.
func (m *MockEventStream) Sinks() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sinks")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sinks indicates an expected call of Sinks.
func (mr *MockEventStreamMockRecorder) Sinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sinks", reflect.TypeOf((*MockEventStream)(nil).Sinks))
}
