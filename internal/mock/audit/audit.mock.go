// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package audit_mock is a generated GoMock package.
package audit_mock

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	audit "inetmock.icb4dc0.de/inetmock/pkg/audit"
	auditv1 "inetmock.icb4dc0.de/inetmock/pkg/audit/v1"
)

// MockEventBuilder is a mock of EventBuilder interface.
type MockEventBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEventBuilderMockRecorder
}

// MockEventBuilderMockRecorder is the mock recorder for MockEventBuilder.
type MockEventBuilderMockRecorder struct {
	mock *MockEventBuilder
}

// NewMockEventBuilder creates a new mock instance.
func NewMockEventBuilder(ctrl *gomock.Controller) *MockEventBuilder {
	mock := &MockEventBuilder{ctrl: ctrl}
	mock.recorder = &MockEventBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBuilder) EXPECT() *MockEventBuilderMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockEventBuilder) Emit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit")
}

// Emit indicates an expected call of Emit.
func (mr *MockEventBuilderMockRecorder) Emit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEventBuilder)(nil).Emit))
}

// WithApplication mocks base method.
func (m *MockEventBuilder) WithApplication(app auditv1.AppProtocol) audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithApplication", app)
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// WithApplication indicates an expected call of WithApplication.
func (mr *MockEventBuilderMockRecorder) WithApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithApplication", reflect.TypeOf((*MockEventBuilder)(nil).WithApplication), app)
}

// WithDestination mocks base method.
func (m *MockEventBuilder) WithDestination(ip net.IP, port uint16) audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDestination", ip, port)
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// WithDestination indicates an expected call of WithDestination.
func (mr *MockEventBuilderMockRecorder) WithDestination(ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDestination", reflect.TypeOf((*MockEventBuilder)(nil).WithDestination), ip, port)
}

// WithDestinationFromAddr mocks base method.
func (m *MockEventBuilder) WithDestinationFromAddr(addr net.Addr) (audit.EventBuilder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDestinationFromAddr", addr)
	ret0, _ := ret[0].(audit.EventBuilder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithDestinationFromAddr indicates an expected call of WithDestinationFromAddr.
func (mr *MockEventBuilderMockRecorder) WithDestinationFromAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDestinationFromAddr", reflect.TypeOf((*MockEventBuilder)(nil).WithDestinationFromAddr), addr)
}

// WithProtocolDetails mocks base method.
func (m *MockEventBuilder) WithProtocolDetails(details audit.Details) audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithProtocolDetails", details)
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// WithProtocolDetails indicates an expected call of WithProtocolDetails.
func (mr *MockEventBuilderMockRecorder) WithProtocolDetails(details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithProtocolDetails", reflect.TypeOf((*MockEventBuilder)(nil).WithProtocolDetails), details)
}

// WithSource mocks base method.
func (m *MockEventBuilder) WithSource(ip net.IP, port uint16) audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSource", ip, port)
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// WithSource indicates an expected call of WithSource.
func (mr *MockEventBuilderMockRecorder) WithSource(ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSource", reflect.TypeOf((*MockEventBuilder)(nil).WithSource), ip, port)
}

// WithSourceFromAddr mocks base method.
func (m *MockEventBuilder) WithSourceFromAddr(addr net.Addr) (audit.EventBuilder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSourceFromAddr", addr)
	ret0, _ := ret[0].(audit.EventBuilder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithSourceFromAddr indicates an expected call of WithSourceFromAddr.
func (mr *MockEventBuilderMockRecorder) WithSourceFromAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSourceFromAddr", reflect.TypeOf((*MockEventBuilder)(nil).WithSourceFromAddr), addr)
}

// WithTLSDetails mocks base method.
func (m *MockEventBuilder) WithTLSDetails(details *audit.TLSDetails) audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTLSDetails", details)
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// WithTLSDetails indicates an expected call of WithTLSDetails.
func (mr *MockEventBuilderMockRecorder) WithTLSDetails(details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTLSDetails", reflect.TypeOf((*MockEventBuilder)(nil).WithTLSDetails), details)
}

// WithTransport mocks base method.
func (m *MockEventBuilder) WithTransport(transport auditv1.TransportProtocol) audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransport", transport)
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// WithTransport indicates an expected call of WithTransport.
func (mr *MockEventBuilderMockRecorder) WithTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransport", reflect.TypeOf((*MockEventBuilder)(nil).WithTransport), transport)
}

// MockEmitter is a mock of Emitter interface.
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter.
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance.
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// Builder mocks base method.
func (m *MockEmitter) Builder() audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Builder")
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// Builder indicates an expected call of Builder.
func (mr *MockEmitterMockRecorder) Builder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Builder", reflect.TypeOf((*MockEmitter)(nil).Builder))
}

// Emit mocks base method.
func (m *MockEmitter) Emit(ev *audit.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", ev)
}

// Emit indicates an expected call of Emit.
func (mr *MockEmitterMockRecorder) Emit(ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEmitter)(nil).Emit), ev)
}

// MockSink is a mock of Sink interface.
type MockSink struct {
	ctrl     *gomock.Controller
	recorder *MockSinkMockRecorder
}

// MockSinkMockRecorder is the mock recorder for MockSink.
type MockSinkMockRecorder struct {
	mock *MockSink
}

// NewMockSink creates a new mock instance.
func NewMockSink(ctrl *gomock.Controller) *MockSink {
	mock := &MockSink{ctrl: ctrl}
	mock.recorder = &MockSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSink) EXPECT() *MockSinkMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockSink) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSinkMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSink)(nil).Name))
}

// OnEvent mocks base method.
func (m *MockSink) OnEvent(ev *audit.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnEvent", ev)
}

// OnEvent indicates an expected call of OnEvent.
func (mr *MockSinkMockRecorder) OnEvent(ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEvent", reflect.TypeOf((*MockSink)(nil).OnEvent), ev)
}

// MockEventStream is a mock of EventStream interface.
type MockEventStream struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamMockRecorder
}

// MockEventStreamMockRecorder is the mock recorder for MockEventStream.
type MockEventStreamMockRecorder struct {
	mock *MockEventStream
}

// NewMockEventStream creates a new mock instance.
func NewMockEventStream(ctrl *gomock.Controller) *MockEventStream {
	mock := &MockEventStream{ctrl: ctrl}
	mock.recorder = &MockEventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStream) EXPECT() *MockEventStreamMockRecorder {
	return m.recorder
}

// Builder mocks base method.
func (m *MockEventStream) Builder() audit.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Builder")
	ret0, _ := ret[0].(audit.EventBuilder)
	return ret0
}

// Builder indicates an expected call of Builder.
func (mr *MockEventStreamMockRecorder) Builder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Builder", reflect.TypeOf((*MockEventStream)(nil).Builder))
}

// Close mocks base method.
func (m *MockEventStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEventStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventStream)(nil).Close))
}

// Emit mocks base method.
func (m *MockEventStream) Emit(ev *audit.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", ev)
}

// Emit indicates an expected call of Emit.
func (mr *MockEventStreamMockRecorder) Emit(ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEventStream)(nil).Emit), ev)
}

// RegisterSink mocks base method.
func (m *MockEventStream) RegisterSink(ctx context.Context, s audit.Sink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSink", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSink indicates an expected call of RegisterSink.
func (mr *MockEventStreamMockRecorder) RegisterSink(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSink", reflect.TypeOf((*MockEventStream)(nil).RegisterSink), ctx, s)
}

// RemoveSink mocks base method.
func (m *MockEventStream) RemoveSink(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSink", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveSink indicates an expected call of RemoveSink.
func (mr *MockEventStreamMockRecorder) RemoveSink(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSink", reflect.TypeOf((*MockEventStream)(nil).RemoveSink), name)
}

// Sinks mocks base method.
func (m *MockEventStream) Sinks() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sinks")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sinks indicates an expected call of Sinks.
func (mr *MockEventStreamMockRecorder) Sinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sinks", reflect.TypeOf((*MockEventStream)(nil).Sinks))
}
