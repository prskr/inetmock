// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package endpoint_mock is a generated GoMock package.
package endpoint_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cmux "github.com/soheilhy/cmux"

	endpoint "gitlab.com/inetmock/inetmock/internal/endpoint"
)

// MockProtocolHandler is a mock of ProtocolHandler interface.
type MockProtocolHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolHandlerMockRecorder
}

// MockProtocolHandlerMockRecorder is the mock recorder for MockProtocolHandler.
type MockProtocolHandlerMockRecorder struct {
	mock *MockProtocolHandler
}

// NewMockProtocolHandler creates a new mock instance.
func NewMockProtocolHandler(ctrl *gomock.Controller) *MockProtocolHandler {
	mock := &MockProtocolHandler{ctrl: ctrl}
	mock.recorder = &MockProtocolHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocolHandler) EXPECT() *MockProtocolHandlerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockProtocolHandler) Start(ctx context.Context, ss *endpoint.StartupSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, ss)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProtocolHandlerMockRecorder) Start(ctx, ss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProtocolHandler)(nil).Start), ctx, ss)
}

// MockMultiplexHandler is a mock of MultiplexHandler interface.
type MockMultiplexHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMultiplexHandlerMockRecorder
}

// MockMultiplexHandlerMockRecorder is the mock recorder for MockMultiplexHandler.
type MockMultiplexHandlerMockRecorder struct {
	mock *MockMultiplexHandler
}

// NewMockMultiplexHandler creates a new mock instance.
func NewMockMultiplexHandler(ctrl *gomock.Controller) *MockMultiplexHandler {
	mock := &MockMultiplexHandler{ctrl: ctrl}
	mock.recorder = &MockMultiplexHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiplexHandler) EXPECT() *MockMultiplexHandlerMockRecorder {
	return m.recorder
}

// Matchers mocks base method.
func (m *MockMultiplexHandler) Matchers() []cmux.Matcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matchers")
	ret0, _ := ret[0].([]cmux.Matcher)
	return ret0
}

// Matchers indicates an expected call of Matchers.
func (mr *MockMultiplexHandlerMockRecorder) Matchers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matchers", reflect.TypeOf((*MockMultiplexHandler)(nil).Matchers))
}

// Start mocks base method.
func (m *MockMultiplexHandler) Start(ctx context.Context, ss *endpoint.StartupSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, ss)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMultiplexHandlerMockRecorder) Start(ctx, ss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMultiplexHandler)(nil).Start), ctx, ss)
}

// MockStoppableHandler is a mock of StoppableHandler interface.
type MockStoppableHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStoppableHandlerMockRecorder
}

// MockStoppableHandlerMockRecorder is the mock recorder for MockStoppableHandler.
type MockStoppableHandlerMockRecorder struct {
	mock *MockStoppableHandler
}

// NewMockStoppableHandler creates a new mock instance.
func NewMockStoppableHandler(ctrl *gomock.Controller) *MockStoppableHandler {
	mock := &MockStoppableHandler{ctrl: ctrl}
	mock.recorder = &MockStoppableHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoppableHandler) EXPECT() *MockStoppableHandlerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockStoppableHandler) Start(ctx context.Context, ss *endpoint.StartupSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, ss)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStoppableHandlerMockRecorder) Start(ctx, ss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStoppableHandler)(nil).Start), ctx, ss)
}

// Stop mocks base method.
func (m *MockStoppableHandler) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStoppableHandlerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStoppableHandler)(nil).Stop), ctx)
}

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// ConfiguredGroups mocks base method.
func (m *MockHost) ConfiguredGroups() []endpoint.GroupInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfiguredGroups")
	ret0, _ := ret[0].([]endpoint.GroupInfo)
	return ret0
}

// ConfiguredGroups indicates an expected call of ConfiguredGroups.
func (mr *MockHostMockRecorder) ConfiguredGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfiguredGroups", reflect.TypeOf((*MockHost)(nil).ConfiguredGroups))
}

// ServeGroup mocks base method.
func (m *MockHost) ServeGroup(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeGroup", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeGroup indicates an expected call of ServeGroup.
func (mr *MockHostMockRecorder) ServeGroup(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeGroup", reflect.TypeOf((*MockHost)(nil).ServeGroup), ctx, groupName)
}

// ServeGroups mocks base method.
func (m *MockHost) ServeGroups(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeGroups", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeGroups indicates an expected call of ServeGroups.
func (mr *MockHostMockRecorder) ServeGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeGroups", reflect.TypeOf((*MockHost)(nil).ServeGroups), ctx)
}

// Shutdown mocks base method.
func (m *MockHost) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockHostMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockHost)(nil).Shutdown), ctx)
}

// ShutdownGroup mocks base method.
func (m *MockHost) ShutdownGroup(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownGroup", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownGroup indicates an expected call of ShutdownGroup.
func (mr *MockHostMockRecorder) ShutdownGroup(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownGroup", reflect.TypeOf((*MockHost)(nil).ShutdownGroup), ctx, groupName)
}

// MockHostBuilder is a mock of HostBuilder interface.
type MockHostBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockHostBuilderMockRecorder
}

// MockHostBuilderMockRecorder is the mock recorder for MockHostBuilder.
type MockHostBuilderMockRecorder struct {
	mock *MockHostBuilder
}

// NewMockHostBuilder creates a new mock instance.
func NewMockHostBuilder(ctrl *gomock.Controller) *MockHostBuilder {
	mock := &MockHostBuilder{ctrl: ctrl}
	mock.recorder = &MockHostBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostBuilder) EXPECT() *MockHostBuilderMockRecorder {
	return m.recorder
}

// ConfigureGroup mocks base method.
func (m *MockHostBuilder) ConfigureGroup(spec endpoint.ListenerSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureGroup", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureGroup indicates an expected call of ConfigureGroup.
func (mr *MockHostBuilderMockRecorder) ConfigureGroup(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureGroup", reflect.TypeOf((*MockHostBuilder)(nil).ConfigureGroup), spec)
}

// ConfiguredGroups mocks base method.
func (m *MockHostBuilder) ConfiguredGroups() []endpoint.GroupInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfiguredGroups")
	ret0, _ := ret[0].([]endpoint.GroupInfo)
	return ret0
}

// ConfiguredGroups indicates an expected call of ConfiguredGroups.
func (mr *MockHostBuilderMockRecorder) ConfiguredGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfiguredGroups", reflect.TypeOf((*MockHostBuilder)(nil).ConfiguredGroups))
}
