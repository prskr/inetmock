// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: audit/v1/dhcp_details.proto

package auditv1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DHCPOpCode int32

const (
	DHCPOpCode_DHCP_OP_CODE_UNSPECIFIED  DHCPOpCode = 0
	DHCPOpCode_DHCP_OP_CODE_BOOT_REQUEST DHCPOpCode = 1
	DHCPOpCode_DHCP_OP_CODE_BOOT_REPLY   DHCPOpCode = 2
)

// Enum value maps for DHCPOpCode.
var (
	DHCPOpCode_name = map[int32]string{
		0: "DHCP_OP_CODE_UNSPECIFIED",
		1: "DHCP_OP_CODE_BOOT_REQUEST",
		2: "DHCP_OP_CODE_BOOT_REPLY",
	}
	DHCPOpCode_value = map[string]int32{
		"DHCP_OP_CODE_UNSPECIFIED":  0,
		"DHCP_OP_CODE_BOOT_REQUEST": 1,
		"DHCP_OP_CODE_BOOT_REPLY":   2,
	}
)

func (x DHCPOpCode) Enum() *DHCPOpCode {
	p := new(DHCPOpCode)
	*p = x
	return p
}

func (x DHCPOpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCPOpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_v1_dhcp_details_proto_enumTypes[0].Descriptor()
}

func (DHCPOpCode) Type() protoreflect.EnumType {
	return &file_audit_v1_dhcp_details_proto_enumTypes[0]
}

func (x DHCPOpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCPOpCode.Descriptor instead.
func (DHCPOpCode) EnumDescriptor() ([]byte, []int) {
	return file_audit_v1_dhcp_details_proto_rawDescGZIP(), []int{0}
}

type DHCPHwType int32

const (
	DHCPHwType_DHCP_HW_TYPE_UNSPECIFIED   DHCPHwType = 0
	DHCPHwType_DHCP_HW_TYPE_ETHERNET      DHCPHwType = 1
	DHCPHwType_DHCP_HW_TYPE_LOCAL_NET     DHCPHwType = 12
	DHCPHwType_DHCP_HW_TYPE_FIBRE_CHANNEL DHCPHwType = 18
	DHCPHwType_DHCP_HW_TYPE_SERIAL_LINE   DHCPHwType = 20
	DHCPHwType_DHCP_HW_TYPE_IPSEC         DHCPHwType = 31
	DHCPHwType_DHCP_HW_TYPE_INFINIBAND    DHCPHwType = 32
)

// Enum value maps for DHCPHwType.
var (
	DHCPHwType_name = map[int32]string{
		0:  "DHCP_HW_TYPE_UNSPECIFIED",
		1:  "DHCP_HW_TYPE_ETHERNET",
		12: "DHCP_HW_TYPE_LOCAL_NET",
		18: "DHCP_HW_TYPE_FIBRE_CHANNEL",
		20: "DHCP_HW_TYPE_SERIAL_LINE",
		31: "DHCP_HW_TYPE_IPSEC",
		32: "DHCP_HW_TYPE_INFINIBAND",
	}
	DHCPHwType_value = map[string]int32{
		"DHCP_HW_TYPE_UNSPECIFIED":   0,
		"DHCP_HW_TYPE_ETHERNET":      1,
		"DHCP_HW_TYPE_LOCAL_NET":     12,
		"DHCP_HW_TYPE_FIBRE_CHANNEL": 18,
		"DHCP_HW_TYPE_SERIAL_LINE":   20,
		"DHCP_HW_TYPE_IPSEC":         31,
		"DHCP_HW_TYPE_INFINIBAND":    32,
	}
)

func (x DHCPHwType) Enum() *DHCPHwType {
	p := new(DHCPHwType)
	*p = x
	return p
}

func (x DHCPHwType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCPHwType) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_v1_dhcp_details_proto_enumTypes[1].Descriptor()
}

func (DHCPHwType) Type() protoreflect.EnumType {
	return &file_audit_v1_dhcp_details_proto_enumTypes[1]
}

func (x DHCPHwType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCPHwType.Descriptor instead.
func (DHCPHwType) EnumDescriptor() ([]byte, []int) {
	return file_audit_v1_dhcp_details_proto_rawDescGZIP(), []int{1}
}

type DHCPDetailsEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HopCount int32      `protobuf:"varint,1,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Opcode   DHCPOpCode `protobuf:"varint,2,opt,name=opcode,proto3,enum=inetmock.audit.v1.DHCPOpCode" json:"opcode,omitempty"`
	HwType   DHCPHwType `protobuf:"varint,3,opt,name=hw_type,json=hwType,proto3,enum=inetmock.audit.v1.DHCPHwType" json:"hw_type,omitempty"`
}

func (x *DHCPDetailsEntity) Reset() {
	*x = DHCPDetailsEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_v1_dhcp_details_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPDetailsEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPDetailsEntity) ProtoMessage() {}

func (x *DHCPDetailsEntity) ProtoReflect() protoreflect.Message {
	mi := &file_audit_v1_dhcp_details_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPDetailsEntity.ProtoReflect.Descriptor instead.
func (*DHCPDetailsEntity) Descriptor() ([]byte, []int) {
	return file_audit_v1_dhcp_details_proto_rawDescGZIP(), []int{0}
}

func (x *DHCPDetailsEntity) GetHopCount() int32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *DHCPDetailsEntity) GetOpcode() DHCPOpCode {
	if x != nil {
		return x.Opcode
	}
	return DHCPOpCode_DHCP_OP_CODE_UNSPECIFIED
}

func (x *DHCPDetailsEntity) GetHwType() DHCPHwType {
	if x != nil {
		return x.HwType
	}
	return DHCPHwType_DHCP_HW_TYPE_UNSPECIFIED
}

var File_audit_v1_dhcp_details_proto protoreflect.FileDescriptor

var file_audit_v1_dhcp_details_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x69,
	0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x22, 0x9f, 0x01, 0x0a, 0x11, 0x44, 0x48, 0x43, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x48, 0x43, 0x50, 0x48, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x68, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x2a, 0x66, 0x0a, 0x0a, 0x44, 0x48, 0x43, 0x50, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0xd4, 0x01, 0x0a, 0x0a, 0x44,
	0x48, 0x43, 0x50, 0x48, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x48, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x48, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x48, 0x57, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x1e,
	0x0a, 0x1a, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x48, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x49, 0x42, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x48, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x48, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x53,
	0x45, 0x43, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x48, 0x57, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44, 0x10,
	0x20, 0x42, 0xc4, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x6d, 0x6f,
	0x63, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x44, 0x68, 0x63,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50,
	0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x69, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x41, 0x58, 0xaa, 0x02, 0x11, 0x49, 0x6e, 0x65,
	0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x11, 0x49, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1d, 0x49, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x5c, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x13, 0x49, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x63, 0x6b, 0x3a, 0x3a, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audit_v1_dhcp_details_proto_rawDescOnce sync.Once
	file_audit_v1_dhcp_details_proto_rawDescData = file_audit_v1_dhcp_details_proto_rawDesc
)

func file_audit_v1_dhcp_details_proto_rawDescGZIP() []byte {
	file_audit_v1_dhcp_details_proto_rawDescOnce.Do(func() {
		file_audit_v1_dhcp_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_v1_dhcp_details_proto_rawDescData)
	})
	return file_audit_v1_dhcp_details_proto_rawDescData
}

var file_audit_v1_dhcp_details_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_audit_v1_dhcp_details_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_audit_v1_dhcp_details_proto_goTypes = []interface{}{
	(DHCPOpCode)(0),           // 0: inetmock.audit.v1.DHCPOpCode
	(DHCPHwType)(0),           // 1: inetmock.audit.v1.DHCPHwType
	(*DHCPDetailsEntity)(nil), // 2: inetmock.audit.v1.DHCPDetailsEntity
}
var file_audit_v1_dhcp_details_proto_depIdxs = []int32{
	0, // 0: inetmock.audit.v1.DHCPDetailsEntity.opcode:type_name -> inetmock.audit.v1.DHCPOpCode
	1, // 1: inetmock.audit.v1.DHCPDetailsEntity.hw_type:type_name -> inetmock.audit.v1.DHCPHwType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_audit_v1_dhcp_details_proto_init() }
func file_audit_v1_dhcp_details_proto_init() {
	if File_audit_v1_dhcp_details_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audit_v1_dhcp_details_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPDetailsEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_v1_dhcp_details_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_audit_v1_dhcp_details_proto_goTypes,
		DependencyIndexes: file_audit_v1_dhcp_details_proto_depIdxs,
		EnumInfos:         file_audit_v1_dhcp_details_proto_enumTypes,
		MessageInfos:      file_audit_v1_dhcp_details_proto_msgTypes,
	}.Build()
	File_audit_v1_dhcp_details_proto = out.File
	file_audit_v1_dhcp_details_proto_rawDesc = nil
	file_audit_v1_dhcp_details_proto_goTypes = nil
	file_audit_v1_dhcp_details_proto_depIdxs = nil
}
