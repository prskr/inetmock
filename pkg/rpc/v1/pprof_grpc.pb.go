// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilingServiceClient is the client API for ProfilingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilingServiceClient interface {
	ProfileDump(ctx context.Context, in *ProfileDumpRequest, opts ...grpc.CallOption) (*ProfileDumpResponse, error)
	CPUProfile(ctx context.Context, in *CPUProfileRequest, opts ...grpc.CallOption) (*CPUProfileResponse, error)
	Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (*TraceResponse, error)
}

type profilingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilingServiceClient(cc grpc.ClientConnInterface) ProfilingServiceClient {
	return &profilingServiceClient{cc}
}

func (c *profilingServiceClient) ProfileDump(ctx context.Context, in *ProfileDumpRequest, opts ...grpc.CallOption) (*ProfileDumpResponse, error) {
	out := new(ProfileDumpResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.ProfilingService/ProfileDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilingServiceClient) CPUProfile(ctx context.Context, in *CPUProfileRequest, opts ...grpc.CallOption) (*CPUProfileResponse, error) {
	out := new(CPUProfileResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.ProfilingService/CPUProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilingServiceClient) Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (*TraceResponse, error) {
	out := new(TraceResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.ProfilingService/Trace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilingServiceServer is the server API for ProfilingService service.
// All implementations must embed UnimplementedProfilingServiceServer
// for forward compatibility
type ProfilingServiceServer interface {
	ProfileDump(context.Context, *ProfileDumpRequest) (*ProfileDumpResponse, error)
	CPUProfile(context.Context, *CPUProfileRequest) (*CPUProfileResponse, error)
	Trace(context.Context, *TraceRequest) (*TraceResponse, error)
	mustEmbedUnimplementedProfilingServiceServer()
}

// UnimplementedProfilingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfilingServiceServer struct {
}

func (UnimplementedProfilingServiceServer) ProfileDump(context.Context, *ProfileDumpRequest) (*ProfileDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileDump not implemented")
}
func (UnimplementedProfilingServiceServer) CPUProfile(context.Context, *CPUProfileRequest) (*CPUProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPUProfile not implemented")
}
func (UnimplementedProfilingServiceServer) Trace(context.Context, *TraceRequest) (*TraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedProfilingServiceServer) mustEmbedUnimplementedProfilingServiceServer() {}

// UnsafeProfilingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilingServiceServer will
// result in compilation errors.
type UnsafeProfilingServiceServer interface {
	mustEmbedUnimplementedProfilingServiceServer()
}

func RegisterProfilingServiceServer(s grpc.ServiceRegistrar, srv ProfilingServiceServer) {
	s.RegisterService(&ProfilingService_ServiceDesc, srv)
}

func _ProfilingService_ProfileDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilingServiceServer).ProfileDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.ProfilingService/ProfileDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilingServiceServer).ProfileDump(ctx, req.(*ProfileDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilingService_CPUProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPUProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilingServiceServer).CPUProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.ProfilingService/CPUProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilingServiceServer).CPUProfile(ctx, req.(*CPUProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilingService_Trace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilingServiceServer).Trace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.ProfilingService/Trace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilingServiceServer).Trace(ctx, req.(*TraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfilingService_ServiceDesc is the grpc.ServiceDesc for ProfilingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfilingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inetmock.rpc.v1.ProfilingService",
	HandlerType: (*ProfilingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProfileDump",
			Handler:    _ProfilingService_ProfileDump_Handler,
		},
		{
			MethodName: "CPUProfile",
			Handler:    _ProfilingService_CPUProfile_Handler,
		},
		{
			MethodName: "Trace",
			Handler:    _ProfilingService_Trace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/v1/pprof.proto",
}
