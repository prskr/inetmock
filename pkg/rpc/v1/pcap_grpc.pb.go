// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PCAPServiceClient is the client API for PCAPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PCAPServiceClient interface {
	ListAvailableDevices(ctx context.Context, in *ListAvailableDevicesRequest, opts ...grpc.CallOption) (*ListAvailableDevicesResponse, error)
	ListActiveRecordings(ctx context.Context, in *ListActiveRecordingsRequest, opts ...grpc.CallOption) (*ListActiveRecordingsResponse, error)
	StartPCAPFileRecording(ctx context.Context, in *StartPCAPFileRecordingRequest, opts ...grpc.CallOption) (*StartPCAPFileRecordingResponse, error)
	StopPCAPFileRecording(ctx context.Context, in *StopPCAPFileRecordingRequest, opts ...grpc.CallOption) (*StopPCAPFileRecordingResponse, error)
}

type pCAPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPCAPServiceClient(cc grpc.ClientConnInterface) PCAPServiceClient {
	return &pCAPServiceClient{cc}
}

func (c *pCAPServiceClient) ListAvailableDevices(ctx context.Context, in *ListAvailableDevicesRequest, opts ...grpc.CallOption) (*ListAvailableDevicesResponse, error) {
	out := new(ListAvailableDevicesResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.PCAPService/ListAvailableDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCAPServiceClient) ListActiveRecordings(ctx context.Context, in *ListActiveRecordingsRequest, opts ...grpc.CallOption) (*ListActiveRecordingsResponse, error) {
	out := new(ListActiveRecordingsResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.PCAPService/ListActiveRecordings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCAPServiceClient) StartPCAPFileRecording(ctx context.Context, in *StartPCAPFileRecordingRequest, opts ...grpc.CallOption) (*StartPCAPFileRecordingResponse, error) {
	out := new(StartPCAPFileRecordingResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.PCAPService/StartPCAPFileRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCAPServiceClient) StopPCAPFileRecording(ctx context.Context, in *StopPCAPFileRecordingRequest, opts ...grpc.CallOption) (*StopPCAPFileRecordingResponse, error) {
	out := new(StopPCAPFileRecordingResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.v1.PCAPService/StopPCAPFileRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PCAPServiceServer is the server API for PCAPService service.
// All implementations must embed UnimplementedPCAPServiceServer
// for forward compatibility
type PCAPServiceServer interface {
	ListAvailableDevices(context.Context, *ListAvailableDevicesRequest) (*ListAvailableDevicesResponse, error)
	ListActiveRecordings(context.Context, *ListActiveRecordingsRequest) (*ListActiveRecordingsResponse, error)
	StartPCAPFileRecording(context.Context, *StartPCAPFileRecordingRequest) (*StartPCAPFileRecordingResponse, error)
	StopPCAPFileRecording(context.Context, *StopPCAPFileRecordingRequest) (*StopPCAPFileRecordingResponse, error)
	mustEmbedUnimplementedPCAPServiceServer()
}

// UnimplementedPCAPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPCAPServiceServer struct {
}

func (UnimplementedPCAPServiceServer) ListAvailableDevices(context.Context, *ListAvailableDevicesRequest) (*ListAvailableDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableDevices not implemented")
}
func (UnimplementedPCAPServiceServer) ListActiveRecordings(context.Context, *ListActiveRecordingsRequest) (*ListActiveRecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveRecordings not implemented")
}
func (UnimplementedPCAPServiceServer) StartPCAPFileRecording(context.Context, *StartPCAPFileRecordingRequest) (*StartPCAPFileRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPCAPFileRecording not implemented")
}
func (UnimplementedPCAPServiceServer) StopPCAPFileRecording(context.Context, *StopPCAPFileRecordingRequest) (*StopPCAPFileRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPCAPFileRecording not implemented")
}
func (UnimplementedPCAPServiceServer) mustEmbedUnimplementedPCAPServiceServer() {}

// UnsafePCAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PCAPServiceServer will
// result in compilation errors.
type UnsafePCAPServiceServer interface {
	mustEmbedUnimplementedPCAPServiceServer()
}

func RegisterPCAPServiceServer(s grpc.ServiceRegistrar, srv PCAPServiceServer) {
	s.RegisterService(&PCAPService_ServiceDesc, srv)
}

func _PCAPService_ListAvailableDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServiceServer).ListAvailableDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.PCAPService/ListAvailableDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServiceServer).ListAvailableDevices(ctx, req.(*ListAvailableDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCAPService_ListActiveRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveRecordingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServiceServer).ListActiveRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.PCAPService/ListActiveRecordings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServiceServer).ListActiveRecordings(ctx, req.(*ListActiveRecordingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCAPService_StartPCAPFileRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPCAPFileRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServiceServer).StartPCAPFileRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.PCAPService/StartPCAPFileRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServiceServer).StartPCAPFileRecording(ctx, req.(*StartPCAPFileRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCAPService_StopPCAPFileRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPCAPFileRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServiceServer).StopPCAPFileRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.v1.PCAPService/StopPCAPFileRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServiceServer).StopPCAPFileRecording(ctx, req.(*StopPCAPFileRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PCAPService_ServiceDesc is the grpc.ServiceDesc for PCAPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PCAPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inetmock.rpc.v1.PCAPService",
	HandlerType: (*PCAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableDevices",
			Handler:    _PCAPService_ListAvailableDevices_Handler,
		},
		{
			MethodName: "ListActiveRecordings",
			Handler:    _PCAPService_ListActiveRecordings_Handler,
		},
		{
			MethodName: "StartPCAPFileRecording",
			Handler:    _PCAPService_StartPCAPFileRecording_Handler,
		},
		{
			MethodName: "StopPCAPFileRecording",
			Handler:    _PCAPService_StopPCAPFileRecording_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/v1/pcap.proto",
}
